<#
.SYNOPSIS
Collects SQL Server Always On Availability Group performance counters
from one or more remote SQL Server instances.

.DESCRIPTION
Runs Get-Counter remotely against specified SQL Server nodes (Primary/Secondary)
to collect key Always On Availability Group (AG) and Database Replica counters
for a target database. Results are stored as CSV files locally
on the machine executing this script for later comparison.

.EXAMPLE
.\Collect-AGPerfCounters.ps1 -ServerName PD1,PD2 -DatabaseName ESC
#>

param(
    [string[]] $ServerName = @("PD1", "PD2"),       # Remote SQL nodes
    [string] $DatabaseName = "ESC",                 # Target database
    [int] $DurationSeconds = 30,                    # Total duration (seconds)
    [int] $IntervalSeconds = 1,                     # Sample every n seconds
    [string] $OutputDirectory = "C:\PerfLogs\AGPerfData"  # Save path (local)
)

# --- Derived values ---
[int] $MaxSamples = [math]::Ceiling($DurationSeconds / $IntervalSeconds)

Write-Host "============================================="
Write-Host "   SQL AG Performance Counter Collector"
Write-Host "============================================="
Write-Host "Servers       : $($ServerName -join ', ')"
Write-Host "Database      : $DatabaseName"
Write-Host "Duration (s)  : $DurationSeconds"
Write-Host "Interval (s)  : $IntervalSeconds"
Write-Host "Samples       : $MaxSamples"
Write-Host "Output Folder : $OutputDirectory"
Write-Host "============================================="

# --- Ensure output directory exists ---
if (-not (Test-Path $OutputDirectory)) {
    Write-Host "Creating directory $OutputDirectory..."
    New-Item -Path $OutputDirectory -ItemType Directory -Force | Out-Null
}

# --- Define relevant AG-related perfmon counters ---
$AGCounters = @(
    "\MSSQL$*\Availability Replica(*)\*",
    "\MSSQL$*\Database Replica(*)\*"
)

# --- Function to collect counter data from one server ---
function Get-SqlCounterData {
    param(
        [string] $ComputerName,
        [string[]] $Counters,
        [int] $IntervalSeconds,
        [int] $MaxSamples
    )

    try {
        Write-Host "[$ComputerName] Collecting counters..."
        $data = Get-Counter -ComputerName $ComputerName `
                            -Counter $Counters `
                            -SampleInterval $IntervalSeconds `
                            -MaxSamples $MaxSamples `
                            -ErrorAction Stop
        return $data
    }
    catch {
        Write-Warning "[$ComputerName] Failed to collect counters: $_"
        return $null
    }
}

# --- Function to save results to CSV ---
function Save-PerfData {
    param(
        [Microsoft.PowerShell.Commands.GetCounter.PerformanceCounterSampleSet] $CounterData,
        [string] $ServerName,
        [string] $DatabaseName,
        [string] $OutputDirectory
    )

    if (-not $CounterData) {
        Write-Warning "[$ServerName] No data to save."
        return
    }

    $timestamp = Get-Date -Format "yyyyMMdd_HHmmss"
    $outfile = Join-Path $OutputDirectory "$ServerName`_$DatabaseName`_AGPerfData_$timestamp.csv"

    $CounterData.CounterSamples |
        Where-Object { $_.Path -match $DatabaseName } |
        Select-Object `
            @{Name='Timestamp';Expression={$_.Timestamp}},
            @{Name='Path';Expression={$_.Path}},
            @{Name='CookedValue';Expression={$_.CookedValue}} |
        Export-Csv -Path $outfile -NoTypeInformation

    Write-Host "[$ServerName] Data saved to $outfile"
}

# --- MAIN EXECUTION LOOP ---
foreach ($srv in $ServerName) {
    Write-Host "`n=== Starting collection for $srv ==="
    $counterData = Get-SqlCounterData -ComputerName $srv `
        -Counters $AGCounters -IntervalSeconds $IntervalSeconds -MaxSamples $MaxSamples

    Save-PerfData -CounterData $counterData -ServerName $srv `
        -DatabaseName $DatabaseName -OutputDirectory $OutputDirectory

    Write-Host "=== Completed $srv ===`n"
}

Write-Host "âœ… Collection complete. CSVs saved under $OutputDirectory."
