# target servers
$servers = @("abc")  # Server name(s), e.g. "PD1", "PD2"

# target database
$databasename = 'abc'  # e.g., 'ESC'

# duration and interval
$durationseconds = 30
$intervalseconds = 1
$maxsamples = [int][math]::Ceiling($durationseconds / $intervalseconds)

# output directory on this computer
$savepath = "C:\PerfmonResults"
if (!(Test-Path $savepath)) { 
    New-Item -ItemType Directory -Path $savepath -Force | Out-Null 
}

# ============================================
# Function: Get-SqlCounterObjects
# ============================================
function Get-SqlCounterObjects {
    param([string]$computerName)

    try {
        $sets = Get-Counter -ComputerName $computerName -ListSet '*availability*', '*replica*', '*database*', '*databases*' -ErrorAction Stop
        return $sets
    } 
    catch { 
        Write-Warning "[$computerName] Unable to query counter sets. Check Remote Registry, firewall, and permissions. $_"
        return @()
    }
}

# ============================================
# Function: Select-ObjectName
# Choose the most relevant performance counter set
# ============================================
function Select-ObjectName {
    param(
        [string[]]$availabilityNames,
        [string]$family  # e.g. 'Availability Replica', 'Database Replica', 'Databases'
    )

    # Prefer MSSQL$Instance type counter names if present
    $preferred = $availabilityNames | Where-Object { $_ -match 'MSSQL\$' -and $_ -match $family }
    if ($preferred) { 
        return $preferred[0] 
    }

    # Otherwise fall back to generic SQL Server counter
    $fallback = $availabilityNames | Where-Object { $_ -match $family }
    if ($fallback) { 
        return $fallback[0] 
    }

    return $null
}

# ============================================
# Function: Try-GetInstances
# Attempt to retrieve instances for a given counter family
# ============================================
function Try-GetInstances {
    param(
        [string]$computerName,
        [string]$family  # e.g. 'Availability Replica', 'Database Replica', etc.
    )

    try {
        $set = Get-Counter -ComputerName $computerName -ListSet $family -ErrorAction Stop
        return $set.Counter
    } 
    catch {
        Write-Verbose "[$computerName] No instances found for $family. $_"
        return @()
    }
}

# ============================================
# Function: Collect-AGPerfData
# Main data collector for AG-related counters
# ============================================
function Collect-AGPerfData {
    param(
        [string]$computerName,
        [string]$databaseName,
        [int]$intervalSeconds,
        [int]$maxSamples,
        [string]$savepath
    )

    # Define the AG-related counters we care about
    $counters = @(
        "\MSSQL$*\Availability Replica(*)\*",
        "\MSSQL$*\Database Replica(*)\*",
        "\MSSQL$*\Databases(*)\*"
    )

    $timestamp = Get-Date -Format "yyyyMMdd_HHmmss"
    $outfile = Join-Path $savepath "$computerName`_$databaseName`_PerfData_$timestamp.csv"

    try {
        Write-Host "`n[$computerName] Collecting performance counters..."
        $data = Get-Counter -ComputerName $computerName -Counter $counters `
                 -SampleInterval $intervalSeconds -MaxSamples $maxSamples -ErrorAction Stop

        $filtered = $data.CounterSamples | Where-Object { $_.Path -match $databaseName } |
            Select-Object `
                @{Name='Timestamp';Expression={$_.Timestamp}},
                @{Name='Path';Expression={$_.Path}},
                @{Name='CookedValue';Expression={$_.CookedValue}}

        if ($filtered) {
            $filtered | Export-Csv -Path $outfile -NoTypeInformation
            Write-Host "[$computerName] Results saved to $outfile"
        }
        else {
            Write-Warning "[$computerName] No counters matched database '$databaseName'."
        }
    }
    catch {
        Write-Warning "[$computerName] Failed to collect data. $_"
    }
}

# ============================================
# MAIN EXECUTION
# ============================================

foreach ($server in $servers) {
    Write-Host "==========================================="
    Write-Host "Collecting PerfMon data from: $server"
    Write-Host "Database: $databasename"
    Write-Host "Duration: $durationseconds sec (Interval: $intervalseconds sec)"
    Write-Host "==========================================="

    # Confirm we can see counter sets
    $sets = Get-SqlCounterObjects -computerName $server
    if (-not $sets -or $sets.Count -eq 0) {
        Write-Warning "[$server] No counter sets found. Skipping."
        continue
    }

    # Attempt data collection
    Collect-AGPerfData -computerName $server `
                       -databaseName $databasename `
                       -intervalSeconds $intervalseconds `
                       -maxSamples $maxsamples `
                       -savepath $savepath
}

Write-Host "`nâœ… Collection complete. Results saved under $savepath"
